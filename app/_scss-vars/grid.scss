@mixin exampleGrid($columns:28, $screenSize:100px) {
  .example-grid {
    position      : fixed;
    top           : 0;
    left          : 0;
    opacity       : .8;
    width         : 100%;
    z-index       : 999999999;
    pointer-events: none;

    .normal-grid,
    .legacy-grid {
      display    : -ms-grid;
      display    : grid;
      font-size  : 8px;
      line-height: 2;
      color      : white;

      .box {
        display: none;
      }

      @for $i from 1 through (($columns + 2) * 2) {
        .box:nth-of-type(#{$i}) {
          grid-column     : #{$i};
          background-color: cornflowerblue;
          text-align      : center;
          box-sizing      : border-box;
          position        : relative;
          border-right    : 1px solid white;

          &:after {
            content: '#{$i}';
          }

          &:before {
            content     : '';
            height      : 100vh;
            border-right: 1px dotted cornflowerblue;
            position    : absolute;
            left        : -1px;
          }
        }
      }
    }

    .legacy-grid {
      @media screen and (min-width: $screenSize) {
        @for $i from 1 through (($columns + 2) * 2) - 1 {
          .box:nth-of-type(#{$i}) {
            display: block;
          }
        }
      }
    }

    .normal-grid {
      display: none;
      @media screen and (min-width: $screenSize) {
        @for $i from 1 through $columns+2 {
          .box:nth-of-type(#{$i}) {
            display: block;
          }
        }
      }
    }

    @supports (display: grid) {
      .normal-grid {
        display: grid;
      }
    }
  }
}

@mixin responsiveGrid(
  $gridPreviewColumns:12,
  $showlegacyGrid: false,
  $screenSize:1280px,
  $gridGap:30px,
  $normalGrid: 1fr repeat(12, minmax(0, 70px)) 1fr,
  $legacyGrid:1fr repeat(12, 30px minmax(0, 70px)) 30px 1fr,
  $ieNativeGrid: "1fr (30px minmax(0px, 70px))[12] 30px 1fr"
  ) {

  @if $showlegacyGrid {
    @include exampleGrid($gridPreviewColumns, $screenSize);
  }
  .grid {
    display: -ms-grid;
    display: grid;
  }

  @media screen and (min-width: $screenSize) {
    @if $showlegacyGrid {
      .example-grid {
        .normal-grid {
          grid-column-gap      : $gridGap;
          grid-template-columns: $normalGrid;
        }

        .legacy-grid {
          display: -ms-grid;
          display: grid;
          $from-smartphone-portrait: unquote($ieNativeGrid);
          -ms-grid-columns         : $from-smartphone-portrait;
          grid-template-columns    : $legacyGrid;
        }
      }
    }

    .grid {
      grid-column-gap          : $gridGap;
      $from-smartphone-portrait: unquote($ieNativeGrid);
      -ms-grid-columns         : $from-smartphone-portrait;
      grid-template-columns    : $normalGrid;
    }
  }
}

@function grid-repeat($stuff, $repeat, $gap) {
  $list: ();

  @for $i from 1 through $repeat {
    @if $gap {
      $list: append($list, $stuff $gap, space);
    }

    @else {
      $list: append($list, $stuff, space);
    }
  }

  @return $list;
}

@mixin grid-template-columns($column-repeat-exp:1fr, $column-repeat-count:1, $column-gap:false) {
  @if $column-gap !=false {
    grid-column-gap      : $column-gap;
    grid-template-columns: grid-repeat($column-repeat-exp, $column-repeat-count, false);
    -ms-grid-columns     : grid-repeat($column-repeat-exp, $column-repeat-count, $column-gap);
  }

  @else {
    grid-template-columns: grid-repeat($column-repeat-exp, $column-repeat-count, false);
    -ms-grid-columns     : grid-repeat($column-repeat-exp, $column-repeat-count, $column-gap);
  }
}

@mixin grid-template-rows($row-repeat-exp:1fr, $row-repeat-count:1, $row-gap:false) {
  @if $row-gap !=false {
    grid-row-gap      : $row-gap;
    grid-template-rows: grid-repeat($row-repeat-exp, $row-repeat-count, false);
    -ms-grid-rows     : grid-repeat($row-repeat-exp, $row-repeat-count, $row-gap);
  }

  @else {
    grid-template-rows: grid-repeat($row-repeat-exp, $row-repeat-count, false);
    -ms-grid-rows     : grid-repeat($row-repeat-exp, $row-repeat-count, $row-gap);
  }

}

@mixin grid-gap($grid-gap) {
  -webkit-grid-gap: $grid-gap;
  grid-gap        : $grid-gap;
}

@mixin column-gap($column-gap) {
  -webkit-column-gap: $column-gap;
  column-gap        : $column-gap;
}

@mixin grid-column($col-start, $col-end, $column-start-ie:false, $column-end-ie:false) {
  @if $column-start-ie !=false {
    -ms-grid-column     : $column-start-ie;
    -ms-grid-column-span: $column-end-ie - $column-start-ie;
    grid-column         : #{$col-start} / #{$col-end};
  }

  @else {
    -ms-grid-column     : $col-start;
    -ms-grid-column-span: $col-end - $col-start;
    grid-column         : #{$col-start} / #{$col-end};
  }
}

@mixin row-gap($row-gap) {
  -webkit-row-gap: $row-gap;
  row-gap        : $row-gap;
}

@mixin grid-row($row-start, $row-end, $row-start-ie:false, $row-end-ie:false) {
  @if $row-start-ie !=false {
    -ms-grid-row     : $row-start-ie;
    -ms-grid-row-span: $row-end-ie - $row-start-ie;
    grid-row         : #{$row-start} / #{$row-end};
  }

  @else {
    -ms-grid-row     : $row-start;
    -ms-grid-row-span: $row-end - $row-start;
    grid-row         : #{$row-start} / #{$row-end};
  }
}

@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self        : $value;
}

@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self         : $value;
}